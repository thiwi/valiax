# deployment.yml: Kubernetes resources for Valiax application, including
# database PVCs, backend, rule-runner, Celery infrastructure, and frontend.

---
# Postgres data volume claim for Valiax metadata database
# PersistentVolumeClaims for Postgres and the two ecommerce DBs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgdata
  namespace: valiax
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Persistent volume for first ecommerce database instance
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ecommerce-data1
  namespace: valiax
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Persistent volume for second ecommerce database instance
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ecommerce-data2
  namespace: valiax
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# PostgreSQL deployment for main Valiax metadata store
# Postgres (Valiax)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_DB
          value: "Valiax"
        - name: POSTGRES_USER
          value: "user"
        - name: POSTGRES_PASSWORD
          value: "password"
        volumeMounts:
        - name: pgdata
          mountPath: /var/lib/postgresql/data
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: pgdata
        persistentVolumeClaim:
          claimName: pgdata
      - name: initdb
        configMap:
          name: backend-initdb

---
# ClusterIP service exposing PostgreSQL on port 5432
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: valiax
spec:
  selector: { app: postgres }
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432

---
# Redis deployment to serve as Celery broker
# Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels: { app: redis }
  template:
    metadata:
      labels: { app: redis }
    spec:
      containers:
      - name: redis
        image: redis:7
        ports:
        - containerPort: 6379

---
# ClusterIP service exposing Redis on port 6379
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: valiax
spec:
  selector: { app: redis }
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379

---
# Backend API deployment for Valiax, handles rule definitions and results
# Backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: backend:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: DATABASE_URL
          value: postgresql://user:password@postgres:5432/Valiax
        ports:
        - containerPort: 8000

---
# ClusterIP service exposing backend API on port 8000
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: valiax
spec:
  selector: { app: backend }
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000

---
# Optional LLM service deployment (e.g., for AI-driven validations)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-service
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels:
      app: llm-service
  template:
    metadata:
      labels:
        app: llm-service
    spec:
      containers:
      - name: llm-service
        image: llm_service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9000
---
# ClusterIP service exposing LLM API on port 9000
apiVersion: v1
kind: Service
metadata:
  name: llm-service
  namespace: valiax
spec:
  selector: { app: llm-service }
  ports:
  - protocol: TCP
    port: 9000
    targetPort: 9000

---
# Celery worker deployment for scheduling and dispatching rule checks
# Worker
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels: { app: worker }
  template:
    metadata:
      labels: { app: worker }
    spec:
      containers:
      - name: worker
        image: worker:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: CELERY_BROKER_URL
          value: redis://redis:6379/0
        - name: DATABASE_URL
          value: postgresql://user:password@postgres:5432/Valiax
        - name: RULE_RUNNER_URL
          value: http://rule-runner.valiax.svc.cluster.local/run
        command: ["celery", "-A", "worker", "worker", "--loglevel=info"]

---
# Celery beat deployment for periodic task scheduling
# Celery Beat Scheduler
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: celery-beat
        image: worker:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: CELERY_BROKER_URL
          value: redis://redis:6379/0
        - name: DATABASE_URL
          value: postgresql://user:password@postgres:5432/Valiax
        command: ["celery", "-A", "worker", "beat", "--loglevel=info"]

---
# (Optional) Service placeholder for worker, not typically needed
apiVersion: v1
kind: Service
metadata:
  name: worker
  namespace: valiax
spec:
  selector: { app: worker }
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80


---
# Rule Runner deployment: FastAPI service to execute individual rules
# Rule Runner Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rule-runner
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rule-runner
  template:
    metadata:
      labels:
        app: rule-runner
    spec:
      containers:
      - name: rule-runner
        image: rule-runner:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: MAIN_DB_URL
          value: postgresql://user:password@postgres:5432/Valiax
        ports:
        - containerPort: 80
---
# ClusterIP service exposing Rule Runner HTTP endpoint on port 80
# Rule Runner Service
apiVersion: v1
kind: Service
metadata:
  name: rule-runner
  namespace: valiax
spec:
  selector:
    app: rule-runner
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80


---
# Frontend deployment: React application for Valiax UI
# Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels: { app: frontend }
  template:
    metadata:
      labels: { app: frontend }
    spec:
      containers:
      - name: frontend
        image: frontend:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: REACT_APP_API_URL
          value: http://backend:8000
        ports:
        - containerPort: 3000

---
# NodePort service to expose the frontend on a high port
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: valiax
spec:
  type: NodePort
  selector: { app: frontend }
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
    # let minikube pick a high-node-port

---
# First ecommerce database instance for example data
# Ecommerce DB #1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-db-1
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ecommerce-db-1
  template:
    metadata:
      labels:
        app: ecommerce-db-1
    spec:
      containers:
      - name: ecommerce-db-1
        image: postgres:15
        env:
        - name: POSTGRES_DB
          value: ecommerce
        - name: POSTGRES_USER
          value: ecom_user
        - name: POSTGRES_PASSWORD
          value: secret
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: ecommerce-data1
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: ecommerce-data1
        persistentVolumeClaim:
          claimName: ecommerce-data1

---
# ClusterIP service for ecommerce-db-1 on port 5432
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-db-1
  namespace: valiax
spec:
  selector: { app: ecommerce-db-1 }
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  # to expose on localhost:5433, you'll need a NodePort or port-forward

---
# Second ecommerce database instance for example data
# Ecommerce DB #2
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-db-2
  namespace: valiax
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ecommerce-db-2
  template:
    metadata:
      labels:
        app: ecommerce-db-2
    spec:
      containers:
      - name: ecommerce-db-2
        image: postgres:15
        env:
        - name: POSTGRES_DB
          value: ecommerce
        - name: POSTGRES_USER
          value: ecom_user
        - name: POSTGRES_PASSWORD
          value: secret
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: ecommerce-data2
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: ecommerce-data2
        persistentVolumeClaim:
          claimName: ecommerce-data2

---
# ClusterIP service for ecommerce-db-2 on port 5432
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-db-2
  namespace: valiax
spec:
  selector: { app: ecommerce-db-2 }
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
